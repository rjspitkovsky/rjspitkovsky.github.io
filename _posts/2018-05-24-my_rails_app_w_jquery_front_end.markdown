---
layout: post
title:      "My Rails App w/ jQuery Front End! "
date:       2018-05-24 21:49:40 +0000
permalink:  my_rails_app_w_jquery_front_end
---


So, here I am, ready to submit my 4th portfolio project and feeling proud of myself once again. The JS/JS + Rails section was no walk in the park --- I needed to review the curriculum at least three times to fully understand what was being explained(especially templates and external API requests, sheeesh). But like the other parts of the curriculum, with enough time and determination you start to understand what's going on. Those extra review sessions paid off when it came time to implement some jQuery to my rails app. 

For those who do not remember what my rails app was about--- it's called 'Explorers Unite!' and it is essentially a forum for travellers to post about the trips they've been on. They can leave a comment, and a recommendation about a particular country that they have visited, and see the comments and recommendations of other users. 

The first requirement of this project was to make an AJAX GET request to an index resource(in this case, the index of all the trips a particular user posted). This index is to be added to the DOM without a page refresh. So I added a link to my users#show page ('See all users' trips') that when clicked, would fire off the loadTrips() function. loadTrips() takes the userID and makes a get request to '/users/userId/trips'; the data returned is the index of the trips the user has been on. I pass that data to a UserTrip JS Object Model that I created. Also on the users#show page is a handlebars template. The template formats the information for each trip in the data and places it in a #trips div on the users#show page. So in loadTrips() after I've created a new UserTrip, I pass the array of trips to the template after calling Handlebars.compile and add the result to the aforementioned div. 

The next requirement was to make an AJAX GET request to a show resource(in this case, the next trip that I user went on after the trip I am currently viewing). To do that I added a link to my trips#show page('See the next trip by this user'). When clicked, fetchNextTrip() is fired off which first takes the userID and tripID (from data attributes I added to the link). Then I again make a GET request to '/users/userId/trips' and with that data I call a prototype method of the UserTrip class, findNextTripId(). The method returns the id of the next trip for that user in a nextTripId variable. I pass the userId and nextTripId to seedNextTripFields() which makes a GET request to '/users/userId/trips/nextTripId'. Then I just find the elements in the trips#show page by the className I provided and add the pieces of data to their corresponding element. I change the values of the data attributes in the link so that you can continue clicking through all the users' trips until the last one. 

Thirdly, I was required to use display a has_many relationship through a JSON response and display that to the DOM. Since countries have many users through trips, I added another link to the trips#show page. When clicked I got the countryID and made a GET request to 'countries/countryID'-- I then created a prototype method on my Country class that finds the names of all the users who have been to the country, removes the user that I am currently viewing, and then appends the remaining names to the DOM. 

Fourth, I was required to build an AJAX POST request for a new trip. On submission of the trips#new form I used $(this).serialize() to serialize the data into a string that can be sent to the server which then creates the new instance of a trip. I then pass the data to postTrip() which passes the data to a Trip JS Object which then places the dynamic values in to an HTML string which gets appended to the #trips div.

The final requirement was for at least one of my JS object models to have a prototype method that works on the data passed to it. All three of my models have a method: UserTrips has the findNextTripID() which gets the id of the next trip of a user; Country has fetchUsers which find and add to the DOM the other user.names that have visited a particular country; and Trip has changeRecommendValue() which turns the value of the recommend? field, a boolean, into a "Yes" or "No" because if you asked someone if they recommend a restaurant and they answered "True" that would be just a little weird. 

I know I went into some detail on how my code works but it's hard for me to talk about the added JS functionality with generalities. I get so excited when I see the code work in action and am able to append and remove data from the DOM just by clicking a link on the page-- no rerendering needed. And, hell, it's my blog, and if I want to go into the nitty gritty, I go into the nitty gritty.

To summarize, this information does NOT come easily. I needed to put in the time to understand what worked, how it worked, and how to implement that into my own code. But when you put in the time and you see it pay off, that's just a great feeling. One more project to go before I've completed the curriculum and I couldn't be more excited. 
